load("@bazel_gazelle//:def.bzl", "gazelle")
load("@rules_python//python:pip.bzl", "compile_pip_requirements")
load("@buildifier_prebuilt//:rules.bzl", "buildifier")
load("@rules_python_gazelle_plugin//manifest:defs.bzl", "gazelle_python_manifest")
load("@rules_python_gazelle_plugin//modules_mapping:def.bzl", "modules_mapping")
load("@pip_deps//:requirements.bzl", "all_whl_requirements")
load("@rules_apko//apko:defs.bzl", "apko_bazelrc")

exports_files([
    "pyproject.toml",
    "mypy.ignore",
])

apko_bazelrc()

### Proto resolve
# gazelle:resolve py examples.grpc.protos.helloworld_pb2 //examples/grpc/protos:helloworld_py_proto
# gazelle:resolve py examples.grpc.protos.helloworld_pb2_grpc //examples/grpc/protos:helloworld_py_grpc
# gazelle:resolve py bazel_tools.tools.python.runfiles.runfiles @bazel_tools//tools/python/runfiles

# gazelle:map_kind py_test py_test //:bazel/python.bzl
# gazelle:map_kind py_binary py_binary //:bazel/python.bzl
# gazelle:map_kind py_library py_library //:bazel/python.bzl
# gazelle:python_generation_mode file
gazelle(
    name = "gazelle",
    gazelle = "@rules_python_gazelle_plugin//python:gazelle_binary",
)

gazelle(
    name = "gazelle-update-repos",
    args = [
        "--from_file=go.mod",
        "--to_macro=deps.bzl%go_repositories",
    ],
    command = "update-repos",
)

compile_pip_requirements(
    name = "compile_pip",
    requirements_in = "requirements.txt",
    requirements_txt = "requirements_lock.txt",
)

platform(
    name = "docker_image_platform",
    constraint_values = [
        "@platforms//cpu:x86_64",
        "@platforms//os:linux",
    ],
    exec_properties = {
        "OSFamily": "Linux",
        "container-image": "docker://docker.io/juanzolotoochin/ubuntu-build@sha256:25964f9288f6e618c6679526a95b93ad198cff1b8abc0e0ec012a057bdd2da54",
    },
)

buildifier(
    name = "buildifier.check",
    exclude_patterns = [
        "./.git/*",
    ],
    lint_mode = "warn",
    mode = "diff",
)

# Gazelle python extension needs a manifest file mapping from
# an import to the installed package that provides it.
# This macro produces two targets:
# - //:gazelle_python_manifest.update can be used with `bazel run`
#   to recalculate the manifest
# - //:gazelle_python_manifest.test is a test target ensuring that
#   the manifest doesn't need to be updated
gazelle_python_manifest(
    name = "gazelle_python_manifest",
    modules_mapping = ":modules_map",
    pip_repository_name = "pip_deps",
    # NOTE: We can pass a list just like in `bzlmod_build_file_generation` example
    # but we keep a single target here for regression testing.
    requirements = "//:requirements_lock.txt",
)

# This repository rule fetches the metadata for python packages we
# depend on. That data is required for the gazelle_python_manifest
# rule to update our manifest file.
# To see what this rule does, try `bazel run @modules_map//:print`
modules_mapping(
    name = "modules_map",
    exclude_patterns = [
        "^_|(\\._)+",  # This is the default.
        "(\\.tests)+",  # Add a custom one to get rid of the psutil tests.
    ],
    wheels = all_whl_requirements,
)
