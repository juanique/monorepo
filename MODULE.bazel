module(
    name = "monorepo",
    version = "1.0",
)

bazel_dep(name = "aspect_rules_js", version = "2.1.0")
bazel_dep(name = "protobuf", version = "27.3", repo_name = "com_google_protobuf")
bazel_dep(name = "grpc", version = "1.66.0.bcr.3")
bazel_dep(name = "aspect_rules_swc", version = "2.0.1")
bazel_dep(name = "aspect_rules_ts", version = "3.3.1")
bazel_dep(name = "rules_perl", version = "0.2.4")
bazel_dep(name = "rules_python", version = "0.39.0")
bazel_dep(name = "rules_cc", version = "0.0.15")

# NodeJS version is determined by rules_nodejs default
bazel_dep(name = "rules_nodejs", version = "6.3.0")

archive_override(
    module_name = "aspect_rules_js",
    integrity = "sha256-dcJaDxWp5FkrvaRbV6oInkvxf5F2/XNTUejGRE34e1I=",
    patches = ["//bazel/patches:rules_js.patch"],
    patch_strip = 1,
    strip_prefix = "rules_js-2.1.0",
    urls = ["https://github.com/aspect-build/rules_js/releases/download/v2.1.0/rules_js-v2.1.0.tar.gz"],
)

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    # Disable lifecycle hooks for hermeticity.
    lifecycle_hooks = {
        "*": [],
    },
    # This is important to prevent downloading prebuilt binaries for every platform
    # *cough cough* swc/esbuild/etc.
    # no_optional = True,
    npmrc = "//:.npmrc",
    patch_args = {"*": ["-p1"]},
    pnpm_lock = "//:pnpm-lock.yaml",
    quiet = False,
    use_home_npmrc = False,
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")

### Rules TS
rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)
rules_ts_ext.deps(
    ts_version_from = "//:package.json",
)
use_repo(rules_ts_ext, "npm_typescript")

### Python toolchain
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(python_version = "3.10")

### Python pip dependencies
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "monorepo_pip_deps",
    python_version = "3.10",
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "monorepo_pip_deps")

# MyPy dependencies  
pip.parse(
    hub_name = "monorepo_mypy_integration_pip_deps", 
    python_version = "3.10",
    requirements_lock = "//bazel/workspace:mypy_version.txt",
)
use_repo(pip, "monorepo_mypy_integration_pip_deps")
