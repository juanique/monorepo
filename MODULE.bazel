module(
    name = "monorepo",
    version = "1.0",
)

bazel_dep(name = "hermetic_cc_toolchain", version = "4.0.1")
bazel_dep(name = "aspect_rules_js", version = "2.1.0")
bazel_dep(name = "bazel_features", version = "1.23.0", repo_name = "proto_bazel_features")
bazel_dep(name = "protobuf", version = "29.0", repo_name = "com_google_protobuf")
bazel_dep(name = "grpc", version = "1.66.0.bcr.3")
bazel_dep(name = "rules_proto", version = "7.0.2")
bazel_dep(name = "rules_pkg", version = "1.0.1")
bazel_dep(name = "rules_cc", version = "0.0.17")
bazel_dep(name = "zlib", version = "1.3.1.bcr.6")
bazel_dep(name = "buildifier_prebuilt", version = "7.3.1")
bazel_dep(name = "rules_go", version = "0.55.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "gazelle", version = "0.36.0", repo_name = "bazel_gazelle")
bazel_dep(name = "rules_python", version = "1.5.0-rc1")
bazel_dep(name = "rules_python_gazelle_plugin", version = "1.5.0-rc1")
bazel_dep(name = "rules_foreign_cc", version = "0.12.0")
bazel_dep(name = "rules_apko", version = "1.2.3")
bazel_dep(name = "rules_distroless", version = "0.5.1")
bazel_dep(name = "aspect_rules_swc", version = "2.0.1")
bazel_dep(name = "aspect_rules_ts", version = "3.3.1")
bazel_dep(name = "rules_perl", version = "0.4.1")
bazel_dep(name = "aspect_bazel_lib", version = "2.19.4")
bazel_dep(name = "rules_oci", version = "2.2.6")

version = use_extension("@proto_bazel_features//private:extensions.bzl", "version_extension")
use_repo(version, "bazel_features_globals", "bazel_features_version")

# NodeJS version is determined by rules_nodejs default
bazel_dep(name = "rules_nodejs", version = "6.3.0")

archive_override(
    module_name = "aspect_rules_js",
    integrity = "sha256-dcJaDxWp5FkrvaRbV6oInkvxf5F2/XNTUejGRE34e1I=",
    patch_strip = 1,
    patches = ["//bazel/patches:rules_js.patch"],
    strip_prefix = "rules_js-2.1.0",
    urls = ["https://github.com/aspect-build/rules_js/releases/download/v2.1.0/rules_js-v2.1.0.tar.gz"],
)

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm", dev_dependency = True)
npm.npm_translate_lock(
    name = "npm",
    # Disable lifecycle hooks for hermeticity.
    lifecycle_hooks = {
        "*": [],
    },
    # This is important to prevent downloading prebuilt binaries for every platform
    # *cough cough* swc/esbuild/etc.
    # no_optional = True,
    npmrc = "//:.npmrc",
    patch_args = {"*": ["-p1"]},
    pnpm_lock = "//:pnpm-lock.yaml",
    quiet = False,
    use_home_npmrc = False,
    verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")

### Rules TS
rules_ts_ext = use_extension("@aspect_rules_ts//ts:extensions.bzl", "ext", dev_dependency = True)
rules_ts_ext.deps(
    ts_version_from = "//:package.json",
)
use_repo(rules_ts_ext, "npm_typescript")

### Hermetic CC Toolchain
zig_toolchains = use_extension("@hermetic_cc_toolchain//toolchain:ext.bzl", "toolchains")
use_repo(zig_toolchains, "zig_sdk")

register_toolchains(
    "@zig_sdk//toolchain:linux_amd64_gnu.2.28",
    "@zig_sdk//toolchain:linux_arm64_gnu.2.28",
    "@zig_sdk//toolchain:darwin_amd64",
    "@zig_sdk//toolchain:darwin_arm64",
    "@zig_sdk//toolchain:windows_amd64",
    "@zig_sdk//toolchain:windows_arm64",
)

# rules_go
go_deps = use_extension("@bazel_gazelle//:extensions.bzl", "go_deps")
go_deps.from_file(go_mod = "//:go.mod")
go_deps.module_override(
    patches = ["//third_party/com_github_dougthor42_go_tree_sitter:cc_library.patch"],
    path = "github.com/smacker/go-tree-sitter",
)
use_repo(go_deps, "com_github_docker_docker", "com_github_google_go_github_v38", "com_github_libgit2_git2go_v33", "com_github_spf13_cobra", "com_github_stretchr_testify", "org_golang_x_oauth2")

### Rules Python
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    is_default = True,
    python_version = "3.10",
)
use_repo(python, "python_3_10")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "monorepo_pip_deps",
    python_version = "3.10",
    requirements_lock = "//:requirements_lock.txt",
)
use_repo(pip, "monorepo_pip_deps")

### Rules Apko
apko = use_extension("@rules_apko//apko:extensions.bzl", "apko")
apko.translate_lock(
    name = "apko_wolfi_base",
    lock = "//base_images/apko/wolfi-base:apko.lock.json",
)
use_repo(apko, "apko_wolfi_base")

### Rules Distroless
apt = use_extension("@rules_distroless//apt:extensions.bzl", "apt")
apt.install(
    name = "debian12",
    lock = "//base_images/debian:debian12.lock.json",
    manifest = "//base_images/debian:debian12.yaml",
)
use_repo(apt, "debian12")

### Rules OCI
oci = use_extension("@rules_oci//oci:extensions.bzl", "oci")
oci.pull(
    name = "distroless_base",
    digest = "sha256:ccaef5ee2f1850270d453fdf700a5392534f8d1a8ca2acda391fbb6a06b81c86",
    image = "gcr.io/distroless/base",
    platforms = [
        "linux/amd64",
        "linux/arm64",
    ],
)
oci.pull(
    name = "ubuntu22",
    digest = "sha256:b492494d8e0113c4ad3fe4528a4b5ff89faa5331f7d52c5c138196f69ce176a6",
    image = "index.docker.io/library/ubuntu",
)
oci.pull(
    name = "build",
    digest = "sha256:2a669a950ee7941bf0e308372aa9ab1a38dc5491f75e3d6acf7b5e941a3bc32f",
    image = "index.docker.io/juanzolotoochin/ubuntu-build",
)
oci.pull(
    name = "postgres",
    digest = "sha256:cd116dbc6ac97b18f8e1ad07aa94399117863731ec99f06ae1270937a98119bf",
    image = "index.docker.io/library/postgres",
)
oci.pull(
    name = "ubuntu",
    digest = "sha256:eea2c875bb135db3a5d5c959a4161eecce3f6a988cf054125d7f4e836e93e020",
    image = "index.docker.io/juanzolotoochin/ubuntu-base",
)
use_repo(oci, "build", "distroless_base", "distroless_base_linux_amd64", "distroless_base_linux_arm64", "postgres", "ubuntu", "ubuntu22")
