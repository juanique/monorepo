diff --git a/BUILD b/BUILD
index c25a0c6..79d21b8 100644
--- a/BUILD
+++ b/BUILD
@@ -1,4 +1,5 @@
 load("@buildifier_prebuilt//:rules.bzl", "buildifier")
+load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
 
 package(default_visibility = ["//visibility:private"])
 
@@ -27,3 +28,9 @@ label_flag(
     build_setting_default = "//:.mypy.ini",
     visibility = ["//visibility:public"],
 )
+
+string_flag(
+    name = "exclude_contains",
+    build_setting_default = "",
+    visibility = ["//visibility:public"],
+)
diff --git a/config.bzl b/config.bzl
index f6d24f3..6b1b9e9 100644
--- a/config.bzl
+++ b/config.bzl
@@ -20,6 +20,24 @@ def _create_config_impl(ctx):
         executable = False,
     )
 
+    if ctx.attr.mypy_exclude_list:
+        mypy_exclude_list_contents = ctx.read(ctx.attr.mypy_exclude_list)
+    else:
+        mypy_exclude_list_contents = ""
+
+    lines = []
+    lines.append("def get_excluded():")
+    lines.append("  return[")
+    for line in  mypy_exclude_list_contents.split("\n"):
+        if line:
+            lines.append("  '" + line + "',")
+    lines.append("  ]")
+
+    ctx.file(
+        "mypy_exclude.bzl",
+        content = "\n".join(lines)
+    )
+
 create_config = repository_rule(
     implementation = _create_config_impl,
     attrs = {
@@ -28,10 +46,15 @@ create_config = repository_rule(
             allow_single_file = True,
             doc = "The path to the mypy.ini, if one is used..",
         ),
+        "mypy_exclude_list": attr.label(
+            mandatory = False,
+            allow_single_file = True,
+            doc = "The path to the list of paths to ignore.",
+        ),
     },
 )
 
-def mypy_configuration(mypy_config_file = None):
+def mypy_configuration(mypy_config_file = None, mypy_exclude_list = []):
     """**Deprecated**: Instead, see https://github.com/bazel-contrib/bazel-mypy-integration/blob/main/README.md#configuration
 
     Args:
@@ -40,4 +63,5 @@ def mypy_configuration(mypy_config_file = None):
     create_config(
         name = "mypy_integration_config",
         config_filepath = mypy_config_file,
+        mypy_exclude_list = mypy_exclude_list,
     )
diff --git a/mypy.bzl b/mypy.bzl
index 5517e99..fc368ce 100644
--- a/mypy.bzl
+++ b/mypy.bzl
@@ -2,7 +2,9 @@
 
 load("@bazel_skylib//lib:shell.bzl", "shell")
 load("@bazel_skylib//lib:sets.bzl", "sets")
+load("@bazel_skylib//rules:common_settings.bzl", "BuildSettingInfo")
 load("//:rules.bzl", "MyPyStubsInfo")
+load("@mypy_integration_config//:mypy_exclude.bzl", "get_excluded")
 
 MyPyAspectInfo = provider(
     "TODO: documentation",
@@ -98,6 +100,18 @@ def _extract_imports(imports, label):
             mypypath_parts.append("{}/{}".format(label.package, import_))
     return mypypath_parts
 
+def _should_exclude(filename, exclude_list):
+    for item in exclude_list:
+      is_suffix = item.startswith("*")
+      if is_suffix:
+        item = item[1:]
+        if filename.endswith(item):
+          return item
+      else:
+        if filename.startswith(item):
+          return item
+    return ""
+
 def _mypy_rule_impl(ctx, is_aspect = False):
     base_rule = ctx
     if is_aspect:
@@ -105,6 +119,8 @@ def _mypy_rule_impl(ctx, is_aspect = False):
 
     mypy_config_file = ctx.file._mypy_config
 
+    exclusion_list = get_excluded()
+
     mypypath_parts = []
     direct_src_files = []
     transitive_srcs_depsets = []
@@ -157,29 +173,41 @@ def _mypy_rule_impl(ctx, is_aspect = False):
         sets.make([f.root.path for f in src_files]),
     )
 
-    ctx.actions.expand_template(
-        template = ctx.file._template,
-        output = exe,
-        substitutions = {
-            "{MYPY_EXE}": ctx.executable._mypy_cli.path,
-            "{MYPY_ROOT}": ctx.executable._mypy_cli.root.path,
-            "{CACHE_MAP_TRIPLES}": " ".join(_sources_to_cache_map_triples(src_files, is_aspect)),
-            "{PACKAGE_ROOTS}": " ".join([
-                "--package-root " + shell.quote(path or ".")
-                for path in src_root_paths
-            ]),
-            "{SRCS}": " ".join([
-                shell.quote(f.path) if is_aspect else shell.quote(f.short_path)
-                for f in src_files
-            ]),
-            "{VERBOSE_OPT}": "--verbose" if DEBUG else "",
-            "{VERBOSE_BASH}": "set -x" if DEBUG else "",
-            "{OUTPUT}": out.path if out else "",
-            "{MYPYPATH_PATH}": mypypath if mypypath else "",
-            "{MYPY_INI_PATH}": mypy_config_file.path,
-        },
-        is_executable = True,
-    )
+    filtered_src_files = []
+    for x in src_files:
+        exclusion_rule = _should_exclude(x.short_path, exclusion_list)
+        if not exclusion_rule:
+            filtered_src_files.append(x)
+
+    if filtered_src_files:
+        ctx.actions.expand_template(
+            template = ctx.file._template,
+            output = exe,
+            substitutions = {
+                "{MYPY_EXE}": ctx.executable._mypy_cli.path,
+                "{MYPY_ROOT}": ctx.executable._mypy_cli.root.path,
+                "{CACHE_MAP_TRIPLES}": " ".join(_sources_to_cache_map_triples(filtered_src_files, is_aspect)),
+                "{PACKAGE_ROOTS}": " ".join([
+                    "--package-root " + shell.quote(path or ".")
+                    for path in src_root_paths
+                ]),
+                "{SRCS}": " ".join([
+                    shell.quote(f.path) if is_aspect else shell.quote(f.short_path)
+                    for f in filtered_src_files
+                ]),
+                "{VERBOSE_OPT}": "--verbose" if DEBUG else "",
+                "{VERBOSE_BASH}": "set -x" if DEBUG else "",
+                "{OUTPUT}": out.path if out else "",
+                "{MYPYPATH_PATH}": mypypath if mypypath else "",
+                "{MYPY_INI_PATH}": mypy_config_file.path,
+            },
+            is_executable = True,
+        )
+    else:
+        out_path = out.path if out else "/dev/null"
+        ctx.actions.write(
+            output = exe,
+            content = "#!/usr/bin/env bash\necho 'No files to check' > %s" % out_path)
 
     if is_aspect:
         return [
