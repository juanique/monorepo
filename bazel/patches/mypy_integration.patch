diff --git a/BUILD b/BUILD
index c25a0c6..79d21b8 100644
--- a/BUILD
+++ b/BUILD
@@ -1,4 +1,5 @@
 load("@buildifier_prebuilt//:rules.bzl", "buildifier")
+load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
 
 package(default_visibility = ["//visibility:private"])
 
@@ -27,3 +28,9 @@ label_flag(
     build_setting_default = "//:.mypy.ini",
     visibility = ["//visibility:public"],
 )
+
+string_flag(
+    name = "exclude_contains",
+    build_setting_default = "",
+    visibility = ["//visibility:public"],
+)
diff --git a/mypy.bzl b/mypy.bzl
index 5517e99..389394b 100644
--- a/mypy.bzl
+++ b/mypy.bzl
@@ -2,6 +2,7 @@
 
 load("@bazel_skylib//lib:shell.bzl", "shell")
 load("@bazel_skylib//lib:sets.bzl", "sets")
+load("@bazel_skylib//rules:common_settings.bzl", "BuildSettingInfo")
 load("//:rules.bzl", "MyPyStubsInfo")
 
 MyPyAspectInfo = provider(
@@ -32,6 +33,9 @@ DEFAULT_ATTRS = {
         default = Label("//:mypy_config"),
         allow_single_file = True,
     ),
+    "_exclude_contains": attr.label(
+        default = "//:exclude_contains",
+    ),
 }
 
 def _sources_to_cache_map_triples(srcs, is_aspect):
@@ -104,6 +108,7 @@ def _mypy_rule_impl(ctx, is_aspect = False):
         base_rule = ctx.rule
 
     mypy_config_file = ctx.file._mypy_config
+    exclude_contains = ctx.attr._exclude_contains[BuildSettingInfo].value
 
     mypypath_parts = []
     direct_src_files = []
@@ -157,29 +162,46 @@ def _mypy_rule_impl(ctx, is_aspect = False):
         sets.make([f.root.path for f in src_files]),
     )
 
-    ctx.actions.expand_template(
-        template = ctx.file._template,
-        output = exe,
-        substitutions = {
-            "{MYPY_EXE}": ctx.executable._mypy_cli.path,
-            "{MYPY_ROOT}": ctx.executable._mypy_cli.root.path,
-            "{CACHE_MAP_TRIPLES}": " ".join(_sources_to_cache_map_triples(src_files, is_aspect)),
-            "{PACKAGE_ROOTS}": " ".join([
-                "--package-root " + shell.quote(path or ".")
-                for path in src_root_paths
-            ]),
-            "{SRCS}": " ".join([
-                shell.quote(f.path) if is_aspect else shell.quote(f.short_path)
-                for f in src_files
-            ]),
-            "{VERBOSE_OPT}": "--verbose" if DEBUG else "",
-            "{VERBOSE_BASH}": "set -x" if DEBUG else "",
-            "{OUTPUT}": out.path if out else "",
-            "{MYPYPATH_PATH}": mypypath if mypypath else "",
-            "{MYPY_INI_PATH}": mypy_config_file.path,
-        },
-        is_executable = True,
-    )
+    if exclude_contains:
+        filtered_src_files = []
+        for x in src_files:
+            if exclude_contains in x.short_path:
+                pass
+                print("Skipped mypy check for %s per config exclude: %s" % (x.short_path, exclude_contains))
+            else:
+                filtered_src_files.append(x)
+    else:
+        filtered_src_files = src_files
+
+    if filtered_src_files:
+        ctx.actions.expand_template(
+            template = ctx.file._template,
+            output = exe,
+            substitutions = {
+                "{MYPY_EXE}": ctx.executable._mypy_cli.path,
+                "{MYPY_ROOT}": ctx.executable._mypy_cli.root.path,
+                "{CACHE_MAP_TRIPLES}": " ".join(_sources_to_cache_map_triples(filtered_src_files, is_aspect)),
+                "{PACKAGE_ROOTS}": " ".join([
+                    "--package-root " + shell.quote(path or ".")
+                    for path in src_root_paths
+                ]),
+                "{SRCS}": " ".join([
+                    shell.quote(f.path) if is_aspect else shell.quote(f.short_path)
+                    for f in filtered_src_files
+                ]),
+                "{VERBOSE_OPT}": "--verbose" if DEBUG else "",
+                "{VERBOSE_BASH}": "set -x" if DEBUG else "",
+                "{OUTPUT}": out.path if out else "",
+                "{MYPYPATH_PATH}": mypypath if mypypath else "",
+                "{MYPY_INI_PATH}": mypy_config_file.path,
+            },
+            is_executable = True,
+        )
+    else:
+        out_path = out.path if out else "/dev/null"
+        ctx.actions.write(
+            output = exe,
+            content = "#!/usr/bin/env bash\necho 'No files to check' > %s" % out_path)
 
     if is_aspect:
         return [
