package ts

import (
	"github.com/bazelbuild/bazel-gazelle/rule"
)

// Kinds returns a map that maps rule names (kinds) and information on how to
// match and merge attributes that may be found in rules of those kinds.

var tsKinds = map[string]rule.KindInfo{
	"ts_library": {
		NonEmptyAttrs: map[string]bool{
			"srcs": true,
		},
		MergeableAttrs: map[string]bool{
			"srcs": true,
			"deps": true,
		},
	},
	"ts_binary": {
		NonEmptyAttrs: map[string]bool{
			"srcs": true,
		},
		MergeableAttrs: map[string]bool{
			"srcs": true,
			"deps": true,
		},
	},
	"js_library": {
		NonEmptyAttrs: map[string]bool{
			"srcs": true,
		},
		MergeableAttrs: map[string]bool{
			"srcs": true,
			"deps": true,
		},
	},
	"js_binary": {
		NonEmptyAttrs: map[string]bool{
			"srcs": true,
		},
		MergeableAttrs: map[string]bool{
			"srcs": true,
			"deps": true,
		},
	},
	"playwright_test": {
		NonEmptyAttrs: map[string]bool{
			"srcs": true,
		},
		MergeableAttrs: map[string]bool{
			"srcs": true,
			"deps": true,
		},
	},
	"vitest_test": {
		NonEmptyAttrs: map[string]bool{
			"srcs": true,
		},
		MergeableAttrs: map[string]bool{
			"srcs": true,
			"deps": true,
		},
	},
	"react_app": {
		NonEmptyAttrs: map[string]bool{
			"srcs": true,
		},
		MergeableAttrs: map[string]bool{
			"srcs": true,
			"deps": true,
		},
	},
}

func (l *tsLang) Kinds() map[string]rule.KindInfo {
	return tsKinds
}

// Loads returns .bzl files and symbols they define. Every rule generated by
// GenerateRules, now or in the past, should be loadable from one of these
// files.

var tsLoads = []rule.LoadInfo{
	{
		Name:    "//bazel/js:defs.bzl",
		Symbols: []string{"ts_library", "ts_binary", "js_library", "js_binary", "vitest_test", "playwright_test", "react_app"},
	},
}

func (l *tsLang) Loads() []rule.LoadInfo {
	return tsLoads
}
